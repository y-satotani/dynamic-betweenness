import os

if 'IGRAPH_LOCATION' not in ARGUMENTS:
    print('IGRAPH_LOCATION is not given')
    Exit(1)

igraph_location = os.path.abspath(ARGUMENTS.get('IGRAPH_LOCATION', ''))
if FindFile('math.h', os.path.join(igraph_location, 'src', 'core')):
    pass
else:
    print('igraph core not found')
    Exit(1)

check = Environment()
conf = Configure(check)
if not conf.CheckLib('igraph'):
    print('igraph library not found')
    Exit(1)
if not conf.CheckCHeader('igraph/igraph.h'):
    print('igraph header not found')
    Exit(1)
check = conf.Finish()

custom_lib = Environment(
    LIBS=['dybc', 'igraph', 'arpack', 'gmp', 'glpk', 'cxsparse', 'm'],
    LIBPATH=['../dybc'],
    CPPPATH=[
        os.path.abspath('.'),
        os.path.join(igraph_location, 'src'),
        os.path.join(igraph_location, 'include'),
        os.path.join(igraph_location, 'build', 'include'),
        os.path.join(igraph_location, 'build', 'src')
    ]
)

env = custom_lib.Clone(CCFLAGS=['-g', '-Wall'])
Export('env')
lib = env.SConscript('dybc/SConscript', variant_dir='build/debug/dybc')
prog_test = env.SConscript('test/SConscript', variant_dir='build/debug/test')
prog_exp = env.SConscript('exp/SConscript', variant_dir='build/debug/exp')
env.Depends([prog_test, prog_exp], lib)
env.Install('debug', [prog_test, prog_exp])

env = custom_lib.Clone(CCFLAGS=['-Ofast', '-march=native', '-Wall'])
Export('env')
lib = env.SConscript('dybc/SConscript', variant_dir='build/release/dybc')
prog_test = env.SConscript('test/SConscript', variant_dir='build/release/test')
prog_exp = env.SConscript('exp/SConscript', variant_dir='build/release/exp')
env.Depends([prog_test, prog_exp], lib)
env.Install('release', [prog_test, prog_exp])

Clean('.', 'build')
